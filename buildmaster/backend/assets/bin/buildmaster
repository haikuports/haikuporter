#!/bin/bash

if [ ! -d buildmaster -o ! -f haikuports.conf ]
then
	echo "buildmaster must be run from within a configured ports tree"
	exit 1
fi

if [ -z "$BUILD_TARGET_ARCH" ]
then
	echo "please specify BUILD_TARGET_ARCH"
	exit 1
fi

# This is the system-package set to use from /var/buildmaster/system-packages/XXX
if [ -z "$SYSTEM_PACKAGE_BRANCH" ]
then
	echo "please specify SYSTEM_PACKAGE_BRANCH"
	exit 1
fi

# TODO: We might want to move these to haikuports.conf?
export BUILD_TARGET_BRANCH="master"
export BASE_DIR="/var/buildmaster"

export SYSTEM_PACKAGES_DIR="$BASE_DIR/system-packages/$SYSTEM_PACKAGE_BRANCH"
export HAIKUPORTS_DIR="$BASE_DIR/haikuports"
export WORKING_DIR="$HAIKUPORTS_DIR/buildmaster"
export OUTPUT_DIR="$BASE_DIR/output"
export REPO_DIR="/var/packages/repository/$BUILD_TARGET_BRANCH/$BUILD_TARGET_ARCH/current"
export BUILDRUN_BASE="$OUTPUT_DIR/buildruns"

export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib"

case "$1" in
	update)
		git pull --ff-only
		if [ $? -ne 0 ]
		then
			echo "git pull failed, manual fixing needed"
			exit 2
		fi

		REVISIONS_FILE="$WORKING_DIR/processed_rev"
		PREVIOUS_REVISION=$(cat "$REVISIONS_FILE")
		HEAD_REVISION=$(git rev-parse HEAD)

		if [ "$PREVIOUS_REVISION" == "$HEAD_REVISION" ]
		then
			echo "no new revisions"
			exit 3
		fi

		echo "moving from $PREVIOUS_REVISION to $HEAD_REVISION"
		haikuporter.py --no-package-obsoletion --repository-update

		PORTS_TO_BUILD=$(git diff-tree -z -r --name-only --diff-filter ACMTR \
				$PREVIOUS_REVISION..$HEAD_REVISION \
			| xargs --null haikuporter.py --no-package-obsoletion \
				--no-repository-update --ports-for-files \
				--active-versions-only 2> /dev/null \
			| sort -u)

		if [ -z "$PORTS_TO_BUILD" ]
		then
			echo "no ports changed"
			echo "$HEAD_REVISION" > "$REVISIONS_FILE"
			exit 3
		fi
	;;
	everything)
		PORTS_TO_BUILD=$(haikuporter.py --no-package-obsoletion --print-raw \
			--list 2> /dev/null)
	;;
	build)
		PORTS_TO_BUILD="${@:2}"
	;;
	*)
		cat <<EOF
usage: $0 <mode> [<args>]

Where mode can be one of the following modes:

	update
		Fetch the git repository and make a buildrun for all recipes
		that were added/changed since the last update.

	everything
		Make a buildrun to build all current ports (this takes a while).

	build <ports>
		Make a buildrun to build the specified ports.

EOF
		exit 1
	;;
esac

if [ -z "$PORTS_TO_BUILD" ]
then
	echo "no ports to build specified"
	exit 1
fi

echo "ports to be built: $PORTS_TO_BUILD"

if [ ! -e "$BUILDRUN_BASE" ]
then
	mkdir -p "$BUILDRUN_BASE"
fi

BUILDRUN_FILE="$BUILDRUN_BASE/last_buildrun"
BUILDRUN_ID=$(expr $(cat "$BUILDRUN_FILE" 2> /dev/null) + 1)
BUILDRUN_OUTPUT_DIR="$BUILDRUN_BASE/$BUILDRUN_ID"
BUILDRUN_INDEX="$BUILDRUN_BASE/buildruns.txt"

echo "$BUILDRUN_ID" >> "$BUILDRUN_INDEX"
echo "$BUILDRUN_ID" > "$BUILDRUN_FILE"

# Remove and relink the current output dir.
rm "$BUILDRUN_BASE/current"
ln -rs "$BUILDRUN_OUTPUT_DIR" "$BUILDRUN_BASE/current"

haikuporter.py --debug --build-master-output-dir="$BUILDRUN_OUTPUT_DIR" \
	--system-packages-directory="$SYSTEM_PACKAGES_DIR" \
	--build-master $PORTS_TO_BUILD

BUILDMASTER_RESULT=$?

# Link build logs and records into global dirs.
ALL_BUILDS_DIR="$OUTPUT_DIR/builds"
if [ ! -e "$ALL_BUILDS_DIR" ]
then
	mkdir -p "$ALL_BUILDS_DIR"
fi

ln -rst "$ALL_BUILDS_DIR" "$BUILDRUN_OUTPUT_DIR"/builds/*

ALL_RECORDS_DIR="$OUTPUT_DIR/records"
if [ ! -e "$ALL_RECORDS_DIR" ]
then
	mkdir -p "$ALL_RECORDS_DIR"
fi

ln -rst "$ALL_RECORDS_DIR" "$BUILDRUN_OUTPUT_DIR"/records/*

if [ $BUILDMASTER_RESULT -ne 0 ]
then
	echo "build master failed"
	exit 4
fi

case "$1" in
	update)
		echo "$HEAD_REVISION" > "$REVISIONS_FILE"
	;;
esac
