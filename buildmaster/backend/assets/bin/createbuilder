#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright 2016-2021 Haiku, Inc. All rights reserved.
# Distributed under the terms of the MIT License.
#
# Authors:
#   Alexander von Gluck IV <kallisti5@unixzen.com>
#

import os
import sys
import argparse
import json
from subprocess import call
from subprocess import check_output

parser = argparse.ArgumentParser(description='Configure a new remote package builder')
parser.add_argument('-n', '--name', help='Builder name', required=True)
parser.add_argument('-H', '--host', help='Builder ssh host', required=True)
parser.add_argument('-p', '--port', help='Builder ssh port', required=False, default="22")
parser.add_argument('-u', '--user', help='Builder ssh user', required=False, default="user")
parser.add_argument('-C', '--confdir', help='Builder config directory on local machine', required=False, default=os.path.join(os.getcwd(), 'buildmaster/builders'))
parser.add_argument('-f', '--force', help='Force overwrite of existing builder', required=False, action="store_true", default=False)
parser.add_argument('-w', '--workdir', help='Haikuports path on remote builder', required=False, default="/boot/home/haikuports")
args = parser.parse_args()

if not os.path.isdir(args.confdir):
	print("Error: Builder inventory not found!")
	print("Please change to haikuports directory before running this tool (or pass --confdir)!")
	sys.exit()

if not os.path.isdir(args.confdir):
	os.mkdir(args.confdir, 0755)

if not os.path.isdir(args.confdir + "/keys"):
	os.mkdir(args.confdir + "/keys", 0700)

builder_json_path = args.confdir + "/" + args.name + ".json"
private_key_path = args.confdir + "/keys/" + args.name
host_keys_path = args.confdir + "/keys/" + args.name + ".hostkey"

if os.path.isfile(builder_json_path):
	if not args.force:
		print("Error: Builder '" + args.name + "' already defined. Use -f to overwrite.")
		sys.exit(1)
	os.remove(builder_json_path)

if os.path.isfile(private_key_path):
	if not args.force:
		print("Error: Builder '" + args.name + "' already defined. Use -f to overwrite.")
		sys.exit(1)
	os.remove(private_key_path)
	os.remove(private_key_path + ".pub")

print("* Creating new builder '" + args.name + "' (" + args.user + "@" + args.host + ":" + args.port + ")")
print("* Writing builder configuration...")

config = {
  "name": args.name,
  "ssh": {
    "host": args.host,
      "port": args.port,
      "user": args.user,
      "privateKeyFile": "keys/" + args.name,
      "hostKeyFile": "keys/" + args.name + ".hostkey"
    },
    "portstree": {
      "path": args.workdir
    },
    "haikuporter": {
      "path": "haikuporter.py",
      "args": ""
    }
  }

with open(builder_json_path, 'w') as outfile:
	json.dump(config, outfile)

print("* Generating new keys...")
call(["ssh-keygen", "-q", "-t", "rsa", "-b", "4096", "-f", private_key_path, "-P", "", "-C", args.name])

with open(os.devnull, 'w') as devnull:
	hostkeys = check_output(["ssh-keyscan", "-t", "rsa", "-p", args.port, args.host], stderr=devnull).decode('utf-8')

if not len(hostkeys):
    print("* WARNING: Unable to obtain hostkey from " + args.host + ":" + args.port)
    print("           You will need to obtain when the host is reachable with:")
    print("           ssh-keyscan -t rsa -p " + args.port + " " + args.host + " > " + host_keys_path)
else:
    with open(host_keys_path, 'w') as outfile:
        outfile.write(hostkeys)

print("* Configuration complete.\n")
print("Please authorize the following key on your builder:\n")
print("--8<-------8<-------------8<----------------")
print(check_output(["ssh-keygen", "-y", "-f", private_key_path]).decode('utf-8').strip())
print("----------8<-------8<----------------8<-----")
